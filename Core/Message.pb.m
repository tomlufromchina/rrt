// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Message.pb.h"
// @@protoc_insertion_point(imports)

@implementation MessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL MessageTypeIsValidValue(MessageType value) {
  switch (value) {
    case MessageTypeChat:
    case MessageTypeGroupChat:
    case MessageTypeHeadLine:
    case MessageTypePush:
    case MessageTypeRecommend:
      return YES;
    default:
      return NO;
  }
}
BOOL MessageContentTypeIsValidValue(MessageContentType value) {
  switch (value) {
    case MessageContentTypePlain:
    case MessageContentTypeAudio:
    case MessageContentTypePicture:
    case MessageContentTypeFile:
    case MessageContentTypeAll:
    case MessageContentTypeUrl:
      return YES;
    default:
      return NO;
  }
}
BOOL PushTypeIsValidValue(PushType value) {
  switch (value) {
    case PushTypeNone:
    case PushTypePushAll:
    case PushTypeLeaveMessage:
    case PushTypeScore:
    case PushTypeSafety:
    case PushTypeAttendance:
    case PushTypeFriendApply:
    case PushTypeSmallNote:
    case PushTypeSystemMessage:
    case PushTypeJob:
    case PushTypeBlessing:
    case PushTypeManifestation:
    case PushTypeNotification:
    case PushTypeReply:
    case PushTypeOfflineInform:
    case PushTypeOpenAccount:
    case PushTypeServiceExpirationReminder:
    case PushTypeForgotPassword:
    case PushTypeTestInfo:
    case PushTypeMsgCountRechargeSuccess:
    case PushTypeMsgStoragePrompt:
    case PushTypeLoginValidateCode:
      return YES;
    default:
      return NO;
  }
}
@interface MessagePacket ()
@property (strong) NSString* guid;
@property SInt64 autoid;
@property MessageType type;
@property (strong) MessageBody* body;
@property SInt32 state;
@end

@implementation MessagePacket

- (BOOL) hasGuid {
  return !!hasGuid_;
}
- (void) setHasGuid:(BOOL) value_ {
  hasGuid_ = !!value_;
}
@synthesize guid;
- (BOOL) hasAutoid {
  return !!hasAutoid_;
}
- (void) setHasAutoid:(BOOL) value_ {
  hasAutoid_ = !!value_;
}
@synthesize autoid;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value_ {
  hasBody_ = !!value_;
}
@synthesize body;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) value_ {
  hasState_ = !!value_;
}
@synthesize state;
- (id) init {
  if ((self = [super init])) {
    self.guid = @"";
    self.autoid = 0L;
    self.type = MessageTypeChat;
    self.body = [MessageBody defaultInstance];
    self.state = 0;
  }
  return self;
}
static MessagePacket* defaultMessagePacketInstance = nil;
+ (void) initialize {
  if (self == [MessagePacket class]) {
    defaultMessagePacketInstance = [[MessagePacket alloc] init];
  }
}
+ (MessagePacket*) defaultInstance {
  return defaultMessagePacketInstance;
}
- (MessagePacket*) defaultInstance {
  return defaultMessagePacketInstance;
}
- (BOOL) isInitialized {
  if (!self.hasGuid) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasBody) {
    return NO;
  }
  if (!self.hasState) {
    return NO;
  }
  if (!self.body.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGuid) {
    [output writeString:1 value:self.guid];
  }
  if (self.hasAutoid) {
    [output writeInt64:2 value:self.autoid];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  if (self.hasBody) {
    [output writeMessage:4 value:self.body];
  }
  if (self.hasState) {
    [output writeInt32:5 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGuid) {
    size_ += computeStringSize(1, self.guid);
  }
  if (self.hasAutoid) {
    size_ += computeInt64Size(2, self.autoid);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(4, self.body);
  }
  if (self.hasState) {
    size_ += computeInt32Size(5, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MessagePacket*) parseFromData:(NSData*) data {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromData:data] build];
}
+ (MessagePacket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessagePacket*) parseFromInputStream:(NSInputStream*) input {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromInputStream:input] build];
}
+ (MessagePacket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessagePacket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromCodedInputStream:input] build];
}
+ (MessagePacket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessagePacket*)[[[MessagePacket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessagePacketBuilder*) builder {
  return [[MessagePacketBuilder alloc] init];
}
+ (MessagePacketBuilder*) builderWithPrototype:(MessagePacket*) prototype {
  return [[MessagePacket builder] mergeFrom:prototype];
}
- (MessagePacketBuilder*) builder {
  return [MessagePacket builder];
}
- (MessagePacketBuilder*) toBuilder {
  return [MessagePacket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"guid", self.guid];
  }
  if (self.hasAutoid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"autoid", [NSNumber numberWithLongLong:self.autoid]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", [NSNumber numberWithInteger:self.state]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MessagePacket class]]) {
    return NO;
  }
  MessagePacket *otherMessage = other;
  return
      self.hasGuid == otherMessage.hasGuid &&
      (!self.hasGuid || [self.guid isEqual:otherMessage.guid]) &&
      self.hasAutoid == otherMessage.hasAutoid &&
      (!self.hasAutoid || self.autoid == otherMessage.autoid) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || self.state == otherMessage.state) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasGuid) {
    hashCode = hashCode * 31 + [self.guid hash];
  }
  if (self.hasAutoid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.autoid] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.state] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessagePacketBuilder()
@property (strong) MessagePacket* result;
@end

@implementation MessagePacketBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MessagePacket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MessagePacketBuilder*) clear {
  self.result = [[MessagePacket alloc] init];
  return self;
}
- (MessagePacketBuilder*) clone {
  return [MessagePacket builderWithPrototype:result];
}
- (MessagePacket*) defaultInstance {
  return [MessagePacket defaultInstance];
}
- (MessagePacket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessagePacket*) buildPartial {
  MessagePacket* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MessagePacketBuilder*) mergeFrom:(MessagePacket*) other {
  if (other == [MessagePacket defaultInstance]) {
    return self;
  }
  if (other.hasGuid) {
    [self setGuid:other.guid];
  }
  if (other.hasAutoid) {
    [self setAutoid:other.autoid];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessagePacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessagePacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGuid:[input readString]];
        break;
      }
      case 16: {
        [self setAutoid:[input readInt64]];
        break;
      }
      case 24: {
        MessageType value = (MessageType)[input readEnum];
        if (MessageTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        MessageBodyBuilder* subBuilder = [MessageBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setState:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasGuid {
  return result.hasGuid;
}
- (NSString*) guid {
  return result.guid;
}
- (MessagePacketBuilder*) setGuid:(NSString*) value {
  result.hasGuid = YES;
  result.guid = value;
  return self;
}
- (MessagePacketBuilder*) clearGuid {
  result.hasGuid = NO;
  result.guid = @"";
  return self;
}
- (BOOL) hasAutoid {
  return result.hasAutoid;
}
- (SInt64) autoid {
  return result.autoid;
}
- (MessagePacketBuilder*) setAutoid:(SInt64) value {
  result.hasAutoid = YES;
  result.autoid = value;
  return self;
}
- (MessagePacketBuilder*) clearAutoid {
  result.hasAutoid = NO;
  result.autoid = 0L;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (MessageType) type {
  return result.type;
}
- (MessagePacketBuilder*) setType:(MessageType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MessagePacketBuilder*) clearType {
  result.hasType = NO;
  result.type = MessageTypeChat;
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (MessageBody*) body {
  return result.body;
}
- (MessagePacketBuilder*) setBody:(MessageBody*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (MessagePacketBuilder*) setBodyBuilder:(MessageBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (MessagePacketBuilder*) mergeBody:(MessageBody*) value {
  if (result.hasBody &&
      result.body != [MessageBody defaultInstance]) {
    result.body =
      [[[MessageBody builderWithPrototype:result.body] mergeFrom:value] buildPartial];
  } else {
    result.body = value;
  }
  result.hasBody = YES;
  return self;
}
- (MessagePacketBuilder*) clearBody {
  result.hasBody = NO;
  result.body = [MessageBody defaultInstance];
  return self;
}
- (BOOL) hasState {
  return result.hasState;
}
- (SInt32) state {
  return result.state;
}
- (MessagePacketBuilder*) setState:(SInt32) value {
  result.hasState = YES;
  result.state = value;
  return self;
}
- (MessagePacketBuilder*) clearState {
  result.hasState = NO;
  result.state = 0;
  return self;
}
@end

@interface MessageBody ()
@property MessageContentType type;
@property (strong) NSString* content;
@property (strong) NSString* audiouri;
@property (strong) NSString* pictureuri;
@property (strong) NSString* fileuri;
@property (strong) NSString* sender;
@property (strong) NSString* receiver;
@property (strong) NSString* sendtime;
@property (strong) NSString* receivetime;
@property PushType pushmsgtype;
@property (strong) NSString* groupid;
@property (strong) NSString* groupname;
@property (strong) NSString* grouptype;
@property (strong) NSString* url;
@property (strong) NSString* urlpic;
@property (strong) NSString* urldesc;
@end

@implementation MessageBody

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) value_ {
  hasContent_ = !!value_;
}
@synthesize content;
- (BOOL) hasAudiouri {
  return !!hasAudiouri_;
}
- (void) setHasAudiouri:(BOOL) value_ {
  hasAudiouri_ = !!value_;
}
@synthesize audiouri;
- (BOOL) hasPictureuri {
  return !!hasPictureuri_;
}
- (void) setHasPictureuri:(BOOL) value_ {
  hasPictureuri_ = !!value_;
}
@synthesize pictureuri;
- (BOOL) hasFileuri {
  return !!hasFileuri_;
}
- (void) setHasFileuri:(BOOL) value_ {
  hasFileuri_ = !!value_;
}
@synthesize fileuri;
- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
- (BOOL) hasReceiver {
  return !!hasReceiver_;
}
- (void) setHasReceiver:(BOOL) value_ {
  hasReceiver_ = !!value_;
}
@synthesize receiver;
- (BOOL) hasSendtime {
  return !!hasSendtime_;
}
- (void) setHasSendtime:(BOOL) value_ {
  hasSendtime_ = !!value_;
}
@synthesize sendtime;
- (BOOL) hasReceivetime {
  return !!hasReceivetime_;
}
- (void) setHasReceivetime:(BOOL) value_ {
  hasReceivetime_ = !!value_;
}
@synthesize receivetime;
- (BOOL) hasPushmsgtype {
  return !!hasPushmsgtype_;
}
- (void) setHasPushmsgtype:(BOOL) value_ {
  hasPushmsgtype_ = !!value_;
}
@synthesize pushmsgtype;
- (BOOL) hasGroupid {
  return !!hasGroupid_;
}
- (void) setHasGroupid:(BOOL) value_ {
  hasGroupid_ = !!value_;
}
@synthesize groupid;
- (BOOL) hasGroupname {
  return !!hasGroupname_;
}
- (void) setHasGroupname:(BOOL) value_ {
  hasGroupname_ = !!value_;
}
@synthesize groupname;
- (BOOL) hasGrouptype {
  return !!hasGrouptype_;
}
- (void) setHasGrouptype:(BOOL) value_ {
  hasGrouptype_ = !!value_;
}
@synthesize grouptype;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasUrlpic {
  return !!hasUrlpic_;
}
- (void) setHasUrlpic:(BOOL) value_ {
  hasUrlpic_ = !!value_;
}
@synthesize urlpic;
- (BOOL) hasUrldesc {
  return !!hasUrldesc_;
}
- (void) setHasUrldesc:(BOOL) value_ {
  hasUrldesc_ = !!value_;
}
@synthesize urldesc;
- (id) init {
  if ((self = [super init])) {
    self.type = MessageContentTypePlain;
    self.content = @"";
    self.audiouri = @"";
    self.pictureuri = @"";
    self.fileuri = @"";
    self.sender = @"";
    self.receiver = @"";
    self.sendtime = @"";
    self.receivetime = @"";
    self.pushmsgtype = PushTypeNone;
    self.groupid = @"";
    self.groupname = @"";
    self.grouptype = @"";
    self.url = @"";
    self.urlpic = @"";
    self.urldesc = @"";
  }
  return self;
}
static MessageBody* defaultMessageBodyInstance = nil;
+ (void) initialize {
  if (self == [MessageBody class]) {
    defaultMessageBodyInstance = [[MessageBody alloc] init];
  }
}
+ (MessageBody*) defaultInstance {
  return defaultMessageBodyInstance;
}
- (MessageBody*) defaultInstance {
  return defaultMessageBodyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasSender) {
    return NO;
  }
  if (!self.hasReceiver) {
    return NO;
  }
  if (!self.hasSendtime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasAudiouri) {
    [output writeString:3 value:self.audiouri];
  }
  if (self.hasPictureuri) {
    [output writeString:4 value:self.pictureuri];
  }
  if (self.hasFileuri) {
    [output writeString:5 value:self.fileuri];
  }
  if (self.hasSender) {
    [output writeString:6 value:self.sender];
  }
  if (self.hasReceiver) {
    [output writeString:7 value:self.receiver];
  }
  if (self.hasSendtime) {
    [output writeString:8 value:self.sendtime];
  }
  if (self.hasReceivetime) {
    [output writeString:9 value:self.receivetime];
  }
  if (self.hasPushmsgtype) {
    [output writeEnum:10 value:self.pushmsgtype];
  }
  if (self.hasGroupid) {
    [output writeString:11 value:self.groupid];
  }
  if (self.hasGroupname) {
    [output writeString:12 value:self.groupname];
  }
  if (self.hasGrouptype) {
    [output writeString:13 value:self.grouptype];
  }
  if (self.hasUrl) {
    [output writeString:14 value:self.url];
  }
  if (self.hasUrlpic) {
    [output writeString:15 value:self.urlpic];
  }
  if (self.hasUrldesc) {
    [output writeString:16 value:self.urldesc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasContent) {
    size_ += computeStringSize(2, self.content);
  }
  if (self.hasAudiouri) {
    size_ += computeStringSize(3, self.audiouri);
  }
  if (self.hasPictureuri) {
    size_ += computeStringSize(4, self.pictureuri);
  }
  if (self.hasFileuri) {
    size_ += computeStringSize(5, self.fileuri);
  }
  if (self.hasSender) {
    size_ += computeStringSize(6, self.sender);
  }
  if (self.hasReceiver) {
    size_ += computeStringSize(7, self.receiver);
  }
  if (self.hasSendtime) {
    size_ += computeStringSize(8, self.sendtime);
  }
  if (self.hasReceivetime) {
    size_ += computeStringSize(9, self.receivetime);
  }
  if (self.hasPushmsgtype) {
    size_ += computeEnumSize(10, self.pushmsgtype);
  }
  if (self.hasGroupid) {
    size_ += computeStringSize(11, self.groupid);
  }
  if (self.hasGroupname) {
    size_ += computeStringSize(12, self.groupname);
  }
  if (self.hasGrouptype) {
    size_ += computeStringSize(13, self.grouptype);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(14, self.url);
  }
  if (self.hasUrlpic) {
    size_ += computeStringSize(15, self.urlpic);
  }
  if (self.hasUrldesc) {
    size_ += computeStringSize(16, self.urldesc);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MessageBody*) parseFromData:(NSData*) data {
  return (MessageBody*)[[[MessageBody builder] mergeFromData:data] build];
}
+ (MessageBody*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MessageBody*) parseFromInputStream:(NSInputStream*) input {
  return (MessageBody*)[[[MessageBody builder] mergeFromInputStream:input] build];
}
+ (MessageBody*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBody*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MessageBody*)[[[MessageBody builder] mergeFromCodedInputStream:input] build];
}
+ (MessageBody*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MessageBody*)[[[MessageBody builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MessageBodyBuilder*) builder {
  return [[MessageBodyBuilder alloc] init];
}
+ (MessageBodyBuilder*) builderWithPrototype:(MessageBody*) prototype {
  return [[MessageBody builder] mergeFrom:prototype];
}
- (MessageBodyBuilder*) builder {
  return [MessageBody builder];
}
- (MessageBodyBuilder*) toBuilder {
  return [MessageBody builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasAudiouri) {
    [output appendFormat:@"%@%@: %@\n", indent, @"audiouri", self.audiouri];
  }
  if (self.hasPictureuri) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureuri", self.pictureuri];
  }
  if (self.hasFileuri) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fileuri", self.fileuri];
  }
  if (self.hasSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sender", self.sender];
  }
  if (self.hasReceiver) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receiver", self.receiver];
  }
  if (self.hasSendtime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendtime", self.sendtime];
  }
  if (self.hasReceivetime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivetime", self.receivetime];
  }
  if (self.hasPushmsgtype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pushmsgtype", [NSNumber numberWithInteger:self.pushmsgtype]];
  }
  if (self.hasGroupid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupid", self.groupid];
  }
  if (self.hasGroupname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupname", self.groupname];
  }
  if (self.hasGrouptype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"grouptype", self.grouptype];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasUrlpic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"urlpic", self.urlpic];
  }
  if (self.hasUrldesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"urldesc", self.urldesc];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MessageBody class]]) {
    return NO;
  }
  MessageBody *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasAudiouri == otherMessage.hasAudiouri &&
      (!self.hasAudiouri || [self.audiouri isEqual:otherMessage.audiouri]) &&
      self.hasPictureuri == otherMessage.hasPictureuri &&
      (!self.hasPictureuri || [self.pictureuri isEqual:otherMessage.pictureuri]) &&
      self.hasFileuri == otherMessage.hasFileuri &&
      (!self.hasFileuri || [self.fileuri isEqual:otherMessage.fileuri]) &&
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      self.hasReceiver == otherMessage.hasReceiver &&
      (!self.hasReceiver || [self.receiver isEqual:otherMessage.receiver]) &&
      self.hasSendtime == otherMessage.hasSendtime &&
      (!self.hasSendtime || [self.sendtime isEqual:otherMessage.sendtime]) &&
      self.hasReceivetime == otherMessage.hasReceivetime &&
      (!self.hasReceivetime || [self.receivetime isEqual:otherMessage.receivetime]) &&
      self.hasPushmsgtype == otherMessage.hasPushmsgtype &&
      (!self.hasPushmsgtype || self.pushmsgtype == otherMessage.pushmsgtype) &&
      self.hasGroupid == otherMessage.hasGroupid &&
      (!self.hasGroupid || [self.groupid isEqual:otherMessage.groupid]) &&
      self.hasGroupname == otherMessage.hasGroupname &&
      (!self.hasGroupname || [self.groupname isEqual:otherMessage.groupname]) &&
      self.hasGrouptype == otherMessage.hasGrouptype &&
      (!self.hasGrouptype || [self.grouptype isEqual:otherMessage.grouptype]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasUrlpic == otherMessage.hasUrlpic &&
      (!self.hasUrlpic || [self.urlpic isEqual:otherMessage.urlpic]) &&
      self.hasUrldesc == otherMessage.hasUrldesc &&
      (!self.hasUrldesc || [self.urldesc isEqual:otherMessage.urldesc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasAudiouri) {
    hashCode = hashCode * 31 + [self.audiouri hash];
  }
  if (self.hasPictureuri) {
    hashCode = hashCode * 31 + [self.pictureuri hash];
  }
  if (self.hasFileuri) {
    hashCode = hashCode * 31 + [self.fileuri hash];
  }
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  if (self.hasReceiver) {
    hashCode = hashCode * 31 + [self.receiver hash];
  }
  if (self.hasSendtime) {
    hashCode = hashCode * 31 + [self.sendtime hash];
  }
  if (self.hasReceivetime) {
    hashCode = hashCode * 31 + [self.receivetime hash];
  }
  if (self.hasPushmsgtype) {
    hashCode = hashCode * 31 + self.pushmsgtype;
  }
  if (self.hasGroupid) {
    hashCode = hashCode * 31 + [self.groupid hash];
  }
  if (self.hasGroupname) {
    hashCode = hashCode * 31 + [self.groupname hash];
  }
  if (self.hasGrouptype) {
    hashCode = hashCode * 31 + [self.grouptype hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasUrlpic) {
    hashCode = hashCode * 31 + [self.urlpic hash];
  }
  if (self.hasUrldesc) {
    hashCode = hashCode * 31 + [self.urldesc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MessageBodyBuilder()
@property (strong) MessageBody* result;
@end

@implementation MessageBodyBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MessageBody alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MessageBodyBuilder*) clear {
  self.result = [[MessageBody alloc] init];
  return self;
}
- (MessageBodyBuilder*) clone {
  return [MessageBody builderWithPrototype:result];
}
- (MessageBody*) defaultInstance {
  return [MessageBody defaultInstance];
}
- (MessageBody*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MessageBody*) buildPartial {
  MessageBody* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MessageBodyBuilder*) mergeFrom:(MessageBody*) other {
  if (other == [MessageBody defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasAudiouri) {
    [self setAudiouri:other.audiouri];
  }
  if (other.hasPictureuri) {
    [self setPictureuri:other.pictureuri];
  }
  if (other.hasFileuri) {
    [self setFileuri:other.fileuri];
  }
  if (other.hasSender) {
    [self setSender:other.sender];
  }
  if (other.hasReceiver) {
    [self setReceiver:other.receiver];
  }
  if (other.hasSendtime) {
    [self setSendtime:other.sendtime];
  }
  if (other.hasReceivetime) {
    [self setReceivetime:other.receivetime];
  }
  if (other.hasPushmsgtype) {
    [self setPushmsgtype:other.pushmsgtype];
  }
  if (other.hasGroupid) {
    [self setGroupid:other.groupid];
  }
  if (other.hasGroupname) {
    [self setGroupname:other.groupname];
  }
  if (other.hasGrouptype) {
    [self setGrouptype:other.grouptype];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasUrlpic) {
    [self setUrlpic:other.urlpic];
  }
  if (other.hasUrldesc) {
    [self setUrldesc:other.urldesc];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MessageBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MessageBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        MessageContentType value = (MessageContentType)[input readEnum];
        if (MessageContentTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 26: {
        [self setAudiouri:[input readString]];
        break;
      }
      case 34: {
        [self setPictureuri:[input readString]];
        break;
      }
      case 42: {
        [self setFileuri:[input readString]];
        break;
      }
      case 50: {
        [self setSender:[input readString]];
        break;
      }
      case 58: {
        [self setReceiver:[input readString]];
        break;
      }
      case 66: {
        [self setSendtime:[input readString]];
        break;
      }
      case 74: {
        [self setReceivetime:[input readString]];
        break;
      }
      case 80: {
        PushType value = (PushType)[input readEnum];
        if (PushTypeIsValidValue(value)) {
          [self setPushmsgtype:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 90: {
        [self setGroupid:[input readString]];
        break;
      }
      case 98: {
        [self setGroupname:[input readString]];
        break;
      }
      case 106: {
        [self setGrouptype:[input readString]];
        break;
      }
      case 114: {
        [self setUrl:[input readString]];
        break;
      }
      case 122: {
        [self setUrlpic:[input readString]];
        break;
      }
      case 130: {
        [self setUrldesc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (MessageContentType) type {
  return result.type;
}
- (MessageBodyBuilder*) setType:(MessageContentType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (MessageBodyBuilder*) clearType {
  result.hasType = NO;
  result.type = MessageContentTypePlain;
  return self;
}
- (BOOL) hasContent {
  return result.hasContent;
}
- (NSString*) content {
  return result.content;
}
- (MessageBodyBuilder*) setContent:(NSString*) value {
  result.hasContent = YES;
  result.content = value;
  return self;
}
- (MessageBodyBuilder*) clearContent {
  result.hasContent = NO;
  result.content = @"";
  return self;
}
- (BOOL) hasAudiouri {
  return result.hasAudiouri;
}
- (NSString*) audiouri {
  return result.audiouri;
}
- (MessageBodyBuilder*) setAudiouri:(NSString*) value {
  result.hasAudiouri = YES;
  result.audiouri = value;
  return self;
}
- (MessageBodyBuilder*) clearAudiouri {
  result.hasAudiouri = NO;
  result.audiouri = @"";
  return self;
}
- (BOOL) hasPictureuri {
  return result.hasPictureuri;
}
- (NSString*) pictureuri {
  return result.pictureuri;
}
- (MessageBodyBuilder*) setPictureuri:(NSString*) value {
  result.hasPictureuri = YES;
  result.pictureuri = value;
  return self;
}
- (MessageBodyBuilder*) clearPictureuri {
  result.hasPictureuri = NO;
  result.pictureuri = @"";
  return self;
}
- (BOOL) hasFileuri {
  return result.hasFileuri;
}
- (NSString*) fileuri {
  return result.fileuri;
}
- (MessageBodyBuilder*) setFileuri:(NSString*) value {
  result.hasFileuri = YES;
  result.fileuri = value;
  return self;
}
- (MessageBodyBuilder*) clearFileuri {
  result.hasFileuri = NO;
  result.fileuri = @"";
  return self;
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (NSString*) sender {
  return result.sender;
}
- (MessageBodyBuilder*) setSender:(NSString*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (MessageBodyBuilder*) clearSender {
  result.hasSender = NO;
  result.sender = @"";
  return self;
}
- (BOOL) hasReceiver {
  return result.hasReceiver;
}
- (NSString*) receiver {
  return result.receiver;
}
- (MessageBodyBuilder*) setReceiver:(NSString*) value {
  result.hasReceiver = YES;
  result.receiver = value;
  return self;
}
- (MessageBodyBuilder*) clearReceiver {
  result.hasReceiver = NO;
  result.receiver = @"";
  return self;
}
- (BOOL) hasSendtime {
  return result.hasSendtime;
}
- (NSString*) sendtime {
  return result.sendtime;
}
- (MessageBodyBuilder*) setSendtime:(NSString*) value {
  result.hasSendtime = YES;
  result.sendtime = value;
  return self;
}
- (MessageBodyBuilder*) clearSendtime {
  result.hasSendtime = NO;
  result.sendtime = @"";
  return self;
}
- (BOOL) hasReceivetime {
  return result.hasReceivetime;
}
- (NSString*) receivetime {
  return result.receivetime;
}
- (MessageBodyBuilder*) setReceivetime:(NSString*) value {
  result.hasReceivetime = YES;
  result.receivetime = value;
  return self;
}
- (MessageBodyBuilder*) clearReceivetime {
  result.hasReceivetime = NO;
  result.receivetime = @"";
  return self;
}
- (BOOL) hasPushmsgtype {
  return result.hasPushmsgtype;
}
- (PushType) pushmsgtype {
  return result.pushmsgtype;
}
- (MessageBodyBuilder*) setPushmsgtype:(PushType) value {
  result.hasPushmsgtype = YES;
  result.pushmsgtype = value;
  return self;
}
- (MessageBodyBuilder*) clearPushmsgtype {
  result.hasPushmsgtype = NO;
  result.pushmsgtype = PushTypeNone;
  return self;
}
- (BOOL) hasGroupid {
  return result.hasGroupid;
}
- (NSString*) groupid {
  return result.groupid;
}
- (MessageBodyBuilder*) setGroupid:(NSString*) value {
  result.hasGroupid = YES;
  result.groupid = value;
  return self;
}
- (MessageBodyBuilder*) clearGroupid {
  result.hasGroupid = NO;
  result.groupid = @"";
  return self;
}
- (BOOL) hasGroupname {
  return result.hasGroupname;
}
- (NSString*) groupname {
  return result.groupname;
}
- (MessageBodyBuilder*) setGroupname:(NSString*) value {
  result.hasGroupname = YES;
  result.groupname = value;
  return self;
}
- (MessageBodyBuilder*) clearGroupname {
  result.hasGroupname = NO;
  result.groupname = @"";
  return self;
}
- (BOOL) hasGrouptype {
  return result.hasGrouptype;
}
- (NSString*) grouptype {
  return result.grouptype;
}
- (MessageBodyBuilder*) setGrouptype:(NSString*) value {
  result.hasGrouptype = YES;
  result.grouptype = value;
  return self;
}
- (MessageBodyBuilder*) clearGrouptype {
  result.hasGrouptype = NO;
  result.grouptype = @"";
  return self;
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (MessageBodyBuilder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (MessageBodyBuilder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasUrlpic {
  return result.hasUrlpic;
}
- (NSString*) urlpic {
  return result.urlpic;
}
- (MessageBodyBuilder*) setUrlpic:(NSString*) value {
  result.hasUrlpic = YES;
  result.urlpic = value;
  return self;
}
- (MessageBodyBuilder*) clearUrlpic {
  result.hasUrlpic = NO;
  result.urlpic = @"";
  return self;
}
- (BOOL) hasUrldesc {
  return result.hasUrldesc;
}
- (NSString*) urldesc {
  return result.urldesc;
}
- (MessageBodyBuilder*) setUrldesc:(NSString*) value {
  result.hasUrldesc = YES;
  result.urldesc = value;
  return self;
}
- (MessageBodyBuilder*) clearUrldesc {
  result.hasUrldesc = NO;
  result.urldesc = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
